name: Build-container-image
description: Build container image
inputs:
  num-packages-to-keep:
    description: Number of packages to keep
    required: false
    default: "10"
  container-repository:
    description: Container repository
    required: true
    default: "ghcr.io/${{ github.repository_owner }}"
  image-name:
    description: Image name
    required: true
  containerfile:
    description: Containerfile name
    required: true
  cosign-private-key:
    description: Cosign private key
    required: true
  cosign-password:
    description: Cosign password
    required: true
  setup-layer-caching:
    description: Setup layer caching
    required: false
    default: "false"
  setup-rpm-caching:
    description: Setup rpm caching
    required: false
    default: "false"
  skip-cache:
    description: No cache
    required: false
    default: "false"
runs:
  using: composite
  steps:
    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Set current date as variable
      id: date
      shell: bash
      run: echo "date=$(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT

    - name: Log in to ghcr.io
      uses: redhat-actions/podman-login@v1.7
      with:
        registry: ${{ inputs.container-repository }}
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Create dnf5 cache directory
      if: ${{ inputs.setup-rpm-caching == 'true' }}
      shell: bash
      run: mkdir -p /tmp/libdnf5/

    - name: Cache RPM packages
      if: ${{ inputs.setup-rpm-caching == 'true' }}
      uses: actions/cache@v4
      with:
        path: /tmp/libdnf5/
        key: rpm-cache-${{ inputs.image-name }}-${{ hashFiles(format('./bootc/{0}/{1}', inputs.image-name, inputs.containerfile)) }}
        restore-keys: |
          rpm-cache-${{ inputs.image-name }}-

    - name: Build extra arguments for buildah
      id: build-args
      shell: bash
      run: |
        EXTRA_ARGS=""

        if [[ $LAYER_CACHE == "true" ]]; then
          EXTRA_ARGS+=" --cache-to $IMAGE"
          if [[
              $EVENT_NAME == "schedule" ||
              ($EVENT_NAME== "workflow_dispatch" && $SKIP_CACHE == "true") \
            ]]; then
            EXTRA_ARGS+=" --no-cache"
          else
            EXTRA_ARGS+=" --cache-from $IMAGE"
          fi
        fi

        if [[ $RPM_CACHE == "true" ]]; then
          EXTRA_ARGS+=" --volume /tmp/libdnf5:/var/cache/libdnf5:z"
        fi

        echo "extra-args=$EXTRA_ARGS" >> $GITHUB_OUTPUT
      env:
        IMAGE: ${{ inputs.container-repository }}/evilwoods-cache
        EVENT_NAME: ${{ github.event_name }}
        SKIP_CACHE: ${{ github.event.inputs.skip-cache }}
        RPM_CACHE: ${{ inputs.setup-rpm-caching }}
        LAYER_CACHE: ${{ inputs.setup-layer-caching }}

    - name: Build container image
      id: build-image
      uses: redhat-actions/buildah-build@v2.13
      with:
        context: "./bootc/${{ inputs.image-name }}/"
        containerfiles: "./bootc/${{ inputs.image-name }}/${{ inputs.containerfile }}"
        image: ${{ inputs.image-name }}
        tags: latest ${{ steps.date.outputs.date }}
        layers: true
        oci: true
        extra-args: ${{ steps.build-args.outputs.extra-args }}

    - name: Push to ghcr.io
      uses: redhat-actions/push-to-registry@v2.6
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ inputs.container-repository }}

    - name: Sign image
      shell: bash
      run: |
        DIGEST=$(skopeo inspect docker://${IMAGE_REGISTRY}/${IMAGE_NAME}:latest | jq -r '.Digest')
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${IMAGE_REGISTRY}/${IMAGE_NAME}@${DIGEST}
      env:
        IMAGE_REGISTRY: ${{ inputs.container-repository }}
        IMAGE_NAME: ${{ inputs.image-name }}
        COSIGN_PRIVATE_KEY: ${{ inputs.cosign-private-key  }}
        COSIGN_PASSWORD: ${{ inputs.cosign-password }}

    - name: cleanup untagged images
      uses: actions/delete-package-versions@v5
      with:
        package-name: ${{ inputs.image-name }}
        package-type: container
        min-versions-to-keep: 0
        delete-only-untagged-versions: true
        token: ${{ github.token }}

    - name: cleanup old images
      uses: actions/delete-package-versions@v5
      with:
        package-name: ${{ inputs.image-name }}
        package-type: container
        min-versions-to-keep: ${{ inputs.num-packages-to-keep }}
        token: ${{ github.token }}
